---
- hosts: routers
  gather_facts: no
  connection: local
  vars:
    ansible_network_os: ios
    test_suite:
      test1:
        name: "GigabitEthernet1 interface up"
        result: GigabitEthernet1
      test2:
        name: "Tunnel0 interface up"
        result: Tunnel0
  tasks:
    - name: GigabitEthernet1 interface up
      net_interface:
        name: GigabitEthernet1
        state: up
      register: GigabitEthernet1
      ignore_errors: yes

    - name: Tunnel0 interface up
      net_interface:
        name: Tunnel0
        state: up
      register: Tunnel0
      ignore_errors: yes

    - name: Test reachability across tunnel rtr1->rtr2
      net_ping:
        dest: "{{hostvars['rtr2']['ansible_host']}}"
      when: inventory_hostname == "rtr1"
      register: rtr1_to_rtr2
      ignore_errors: yes

    - name: Test reachability across tunnel rtr2->rtr1
      net_ping:
        dest: "{{hostvars['rtr1']['ansible_host']}}"
      when: inventory_hostname == "rtr2"
      register: rtr2_to_rtr1
      ignore_errors: yes

    - name: Test reachability to ansible
      net_ping:
        dest: "{{hostvars['ansible']['ansible_host']}}"
      register: to_ansible
      ignore_errors: yes

    - name: Test reachability to host1
      net_ping:
        dest: "{{hostvars['host1']['ansible_host']}}"
      register: to_host1
      ignore_errors: yes

    - set_fact:
        GigabitEthernet1_combined: "{{GigabitEthernet1}}"
        Tunnel0_combined: "{{Tunnel0}}"

    - debug:
        var: GigabitEthernet1_combined

    - name: create HTML report
      template:
        src: report.j2
        dest: ./generated_report.html
      delegate_to: localhost
      run_once: true

    - name: debug outputs
      debug:
        var: "{{item}}"
      with_items:
        - GigabitEthernet1
        - Tunnel0
        - rtr1_to_rtr2
        - rtr2_to_rtr1
        - to_ansible
        - to_host1
